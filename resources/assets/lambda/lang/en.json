{
  // Dialog title and descriptions
  "app-argument-container-title": "Argument",
  "app-argument-container-description": "Argument item or constant item, depending on whether the block has an applicand port.",
  "app-applicand-container-title": "Applicand",
  "app-applicand-container-description": "Function to apply to the argument.",
  "case-container-title": "Case constructor",
  "case-container-description": "Constructor item to identify the case to handle. The item's hover text must say that it is a constructor.",
  "function-container-title": "Inscribe item",
  "function-container-empty": "Place an inscribable item in the slot, build the function required by the recipe, then click inscribe.",
  "function-container-success": "Inscription successful!",
  "matchin-container-title": "Match input type family",
  "matchin-container-description": "Item to identify the input type of the match. The item's hover text must say 'is type' or 'is type family'.",

  // Handbook fragments
  "required-function-type": "Required function type:",
  "accepts-inscriptions": "Accepts inscriptions",
  "inscribing": "Inscribing",

  // Inscribe button label
  "inscribe": "Inscribe",

  // Names of the puzzle block dialog tabs
  "tab-container": "Container",
  "tab-errors": "Errors",

  // The prefix shown before the term name in the item info.
  "term-name-prefix": "Term ",

  // Names of blocks
  "block-app-north": "Application",
  "block-doublescope-ud": "Double-sided scope",
  "block-case-north": "Case",
  "block-corner": "Scope corner",
  "block-forall-north": "Forall",
  "block-function-north": "Function",
  "block-match-north": "Match",
  "block-matchin-north": "Match input and return type",
  "block-scope-up": "Scope",
  "block-port-short-direct-out": "Out port",
  "block-port-short-direct-in": "In port",
  "block-wire": "Wire",
  "game:block-pan-enhanced": "Enhanced wooden pan",

  // Names of items
  "item-denaturedterm": "Denatured term",
  "itemdesc-denaturedterm": "This is edible, but barely. It smells like overripe fruit and has a slimy, rubbery texture.",

  "itemdesc-term-fst": "Use this as the applicand in the application jig to convert a term like (A, B) into A.",
  "itemdesc-term-snd": "Use this as the applicand in the application jig to convert a term like (A, B) into B.",
  "itemdesc-term-hd": "Use this as the applicand in the application jig to get the first item from a list like A :: B :: nil.",
  "itemdesc-term-nth": "Use this as the applicand in the application jig to get the first item from a list like A :: B :: nil.",

  // Names of constructors
  "item-constructor-unit-tt": "tt",
  "item-constructor-nat-s": "S",
  "itemdesc-constructor-nat-s": "Use this as the applicand in the application jig to add 1 to a natural number.",
  "item-constructor-nat-o": "O",
  "item-constructor-sum-inr": "inr",
  "item-constructor-sum-inl": "inl",
  "item-constructor-prod-pair": "pair",
  "itemdesc-constructor-prod-pair": "Use this as the applicand in the application jig twice to create a pair like (A, B).",

  // Names of type families
  "item-typefamily-unit": "unit",
  "item-typefamily-nat": "nat",
  "item-typefamily-sum": "sum (aka A + B)",
  "item-typefamily-prod": "prod (aka A * B)",

  // Recipes
  "recipe-identity-desc": "Put two parameter ports (out ports) on the function followed by one result port (in port). Connect the second parameter port (the one to the right) to the result port.",
  "recipe-either-desc": "Put 3 parameter ports on the function. Connect either parameter of type A to the result port.",
  "recipe-build-or-desc": "Put the 'inl' or 'inr' constructor in an application block. Connect the parameter of type A to the argument port of the application block (input port on back). Connect the application port output to the function result port.",
  "recipe-and2-desc": "Put the 'and' constructor in an application block. Connect the parameter of type A to the argument port. Connect the application result to another application block. Use the parameter of type B as the argument for the second application.",
  "recipe-and3-desc": "Use 2 pair constructors inside application blocks, plus 2 more application blocks.",
  "recipe-pair-first-desc": "Connect the A*B parameter to a match block to destruct it. Place a case block touching the match block. Put the pair constructor in the case block. Build a scope around the case block. Put two parameter ports and a result port in the case scope. Connect the first case parameter to the result port.",
  "recipe-swap-and-desc": "Destruct the prod type, then use the pair constructor to rebuild it with the arguments swapped.",
  "recipe-and-distrib-desc": "Destruct the prod type, then reconstruct it with A added on each side.",
  "recipe-swap-or-desc": "Destruct the A+B parameter with a match block. Use two case blocks with the match block: inl and inr. In the inl case, construct the output using inr. In the inr case, construct the output using inl.",
  "recipe-and-assoc-desc": "Destruct the parameter twice using nested match statements with the pair constructor in the case block, then rebuild it with the pair constructor.",
}
